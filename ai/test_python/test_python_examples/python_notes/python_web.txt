1. http
#每一个URL可以对应GET/POST/PUT/DELETE等请求
#请求的方法 URL  版本  
GET / HTTP/1.1
Accept: text/html,image/apng
Accept-Encoding: gzip, deflate, br
#域名host
Host: www.baidu.com

#请求的方法 URL  版本
POST /path HTTP/1.1
Header1: Value1
Header2: Value2
Header3: Value3

body data goes here...


#200表示成功，3xx表示重定向，4xx表示客户端发送的请求有错误，5xx表示服务器端处理时发生了错误；
#版本 状态码  状态码描述
HTTP/1.1 200 OK
Connection: keep-alive
Content-Encoding: gzip
Content-Type: text/html;charset=utf-8

body data goes here...

#HTML定义了页面的内容，CSS来控制页面元素的样式，而JavaScript负责页面的交互逻辑。
2. html
<html>
<head>
  <title>Hello</title>
</head>
<body>
  <h1>Hello, world!</h1>
</body>
</html>

3. CSS   
CSS是Cascading Style Sheets（层叠样式表）的简称，CSS用来控制HTML里的所有元素如何展现，
比如，给标题元素<h1>加一个样式，变成48号字体，灰色，带阴影：
<html>
<head>
  <title>Hello</title>
  <style>
    h1 {
      color: #333333;
      font-size: 48px;
      text-shadow: 3px 3px 3px #666666;
    }
  </style>
</head>
<body>
  <h1>Hello, world!</h1>
</body>
</html>

4. java script
<html>
<head>
  <title>Hello</title>
  <style>
    h1 {
      color: #333333;
      font-size: 48px;
      text-shadow: 3px 3px 3px #666666;
    }
  </style>
  <script>
    function change() {
      document.getElementsByTagName('h1')[0].style.color = '#ff0000';
    }
  </script>
</head>
<body>
  <h1 onclick="change()">Hello, world!</h1>
</body>
</html>

5. 一个Web应用的本质就是：
  <1>. 浏览器发送一个HTTP请求；
  <2>. 服务器收到请求，生成一个HTML文档；
  <3>. 服务器把HTML文档作为HTTP响应的Body发送给浏览器；
  <4>. 浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。
最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。
Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。

6.WSGI
动态生成HTML:
  即底层代码由专门的服务器软件实现，可以用Python专注于生成HTML文档。也就是上层软件不接触到TCP连接、HTTP原始请求和响应格式，
所以，需要一个统一的接口，让我们专心用Python编写Web业务，这个接口就是WSGI：Web Server Gateway Interface。

WSGI接口定义非常简单，它只要求Web开发者实现一个处理函数（符合WSGI标准的一个HTTP处理函数），就可以响应HTTP请求，
即如何从environ这个dict对象拿到HTTP请求信息，然后构造HTML，通过start_response()发送Header，最后返回Body。函数定义如下：
#hello.py
def application(environ, start_response):  #environ：一个包含所有HTTP请求信息的dict对象；
    #start_response：一个发送HTTP响应的函数，发送了HTTP响应的Header，
	#接收两个参数，一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示。
    start_response('200 OK', [('Content-Type', 'text/html')])                                 
    return [b'<h1>Hello, web!</h1>']  #返回值b'<h1>Hello, web!</h1>'将作为HTTP响应的Body发送给浏览器。

application()函数必须由WSGI服务器来调用。有很多符合WSGI规范的服务器，我们可以挑选一个来用，比如Python内置了一个WSGI服务器，即wsgiref，
它是用纯Python编写的WSGI服务器的参考实现（完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用）。

例子如下：
# hello.py: 实现wsgi处理函数
def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    body = '<h1>Hello, %s!</h1>' % (environ['PATH_INFO'][1:] or 'web')
    return [body.encode('utf-8')]
	
# server.py: 负责启动WSGI服务器，加载application()函数
from wsgiref.simple_server import make_server
from hello import application

httpd = make_server('', 8000, application) #创建一个服务器，IP地址为空，端口是8000，处理函数是application:
print('Serving HTTP on port 8000...')
httpd.serve_forever()  # 开始监听HTTP请求

其实一个Web App，就是写一个WSGI的处理函数，针对每个HTTP请求进行响应。但是如何处理100个不同的URL？

7. web框架
需要在WSGI接口之上能进一步抽象，让我们专注于用一个函数处理一个URL，至于URL到函数的映射，就交给Web框架来做, 如
    Flask（pip install flask）
    Django：全能型Web框架；
    Tornado：Facebook的开源异步Web框架。
有了Web框架，我们在编写Web应用时，注意力就从WSGI处理函数转移到URL+对应的处理函数
Flask通过Python的装饰器在内部自动地把URL和函数给关联起来。
例如：
#app.py : Flask自带的Server在端口5000上监听
from flask import Flask
from flask import request

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def home():
    return '<h1>Home</h1>'

@app.route('/signin', methods=['GET'])
def signin_form():
    return '''<form action="/signin" method="post">
              <p><input name="username"></p>
              <p><input name="password" type="password"></p>
              <p><button type="submit">Sign In</button></p>
              </form>'''

@app.route('/signin', methods=['POST'])
def signin():
    # 需要从request对象读取表单内容：
    if request.form['username']=='admin' and request.form['password']=='password':  #Flask通过request.form['name']来获取表单的内容
        return '<h3>Hello, admin!</h3>'
    return '<h3>Bad username or password.</h3>'

if __name__ == '__main__':
    app.run()

test：浏览器http://localhost:5000/signin或http://localhost:5000

8. 模板(即CMVC：Model-View-Controller，中文名“模型-视图-控制器”)
   预先准备一个HTML模板（其中嵌入了一些变量和指令），然后，根据我们传入的数据，替换后，得到最终的HTML，发送给用户.
   Controller负责业务逻辑；包含变量的模板就是V：View，View负责显示逻辑；
   Model是用来传给View的，这样View在替换变量的时候，就可以从Model中取出相应的数据；如下：                          
   （Controller)python控制逻辑                  html文件（可显示的个性化数据）	
            |             \                      /
			|提取数据	   \ 将数据传送         /生成
			|	            \                  /
   (Model)含有数据的结构  （View)html模板:显示逻辑  
例子：
#app.py
from flask import Flask, request, render_template

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def home():
    return render_template('home.html')

@app.route('/signin', methods=['GET'])
def signin_form():
    return render_template('form.html')

@app.route('/signin', methods=['POST'])
def signin():
    username = request.form['username']
    password = request.form['password']
    if username=='admin' and password=='password':
        return render_template('signin-ok.html', username=username)
    return render_template('form.html', message='Bad username or password', username=username)

if __name__ == '__main__':
    app.run()   
                   
Flask通过render_template()函数来实现模板的渲染。和Web框架类似，Python的模板也有很多种。Flask默认支持的模板是jinja2
pip install jinja2

#home.html
<html>
<head>
  <title>Home</title>
</head>
<body>
  <h1 style="font-style:italic">Home</h1>
</body>
</html>

#form.html
<html>
<head>
  <title>Please Sign In</title>
</head>
<body>
  {% if message %}
  <p style="color:red">{{ message }}</p>
  {% endif %}
  <form action="/signin" method="post">
    <legend>Please sign in:</legend>
    <p><input name="username" placeholder="Username" value="{{ username }}"></p>
    <p><input name="password" placeholder="Password" type="password"></p>
    <p><button type="submit">Sign In</button></p>
  </form>
</body>
</html>

#signin-ok.html
<html>
<head>
  <title>Welcome, {{ username }}</title>
</head>
<body>
  <p>Welcome, {{ username }}!</p>
</body>
</html>

目录结构：
templates目录：signin-ok.html home.html form.html
app.py

通过MVC，我们在Python代码中处理M：Model和C：Controller，而V：View是通过模板处理的，这样，我们就成功地把Python代码和HTML代码最大限度地分离了。
在Jinja2模板中，我们用{{ name }}表示一个需要替换的变量。很多时候，还需要循环、条件判断等指令语句，在Jinja2中，用{% ... %}表示指令。
比如循环输出页码：
{% for i in page_list %}
    <a href="/page/{{ i }}">{{ i }}</a>
{% endfor %}

除了Jinja2，常见的模板还有：
Mako：用<% ... %>和${xxx}的一个模板；
Cheetah：也是用<% ... %>和${xxx}的一个模板；
Django：Django是一站式框架，内置一个用{% ... %}和{{ xxx }}的模板。