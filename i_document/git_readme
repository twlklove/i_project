
0. clone a git project
    #git clone --recurse-submodules -b xx https://github.com/grpc/grpc.git  //--recurse-submodules 连子项目一起clone
    git clone xxxxx
    git submodule update --init # clone 子项目
    
    # don't input passwd everytime
    git config --global credential.helper store  
    
    # lookup branch and addr
    git remote -v
    git branch 
    
    # creat branch, switch branch or del branch
    git checkout -B i_branch_1 
    git checkout i_branch_1
    git branch -D i_branch_1

1. # download files or update 
    1.1 git pull origin <远程分支名>:<本地分支名>     //将远程指定分支 拉取到 本地指定分支上
    1.2 git pull origin <远程分支名>                  //将远程指定分支 拉取到 本地当前分支上
    
    1.3 git push --set-upstream origin <本地分支名>   // 将本地分支与远程同名分支相关联 // 简写方式：git push -u origin <本地分支名>  
        git pull                                      //将与本地当前分支同名的远程分支 拉取到 本地当前分支上
    
    1.4
        git update
        git checkout .

2. push操作
   # upload
       git add xxx
       git commit -m "xx"                           // or "git commit --amend"
   2.1 git push origin <本地分支名>:<远程分支名>    //将本地当前分支 推送到 远程指定分支上
   2.2 git push origin <本地分支名>                 //将本地当前分支 推送到 与本地当前分支同名的远程分支上
   
   2.3 2.3.1 git push --set-upstream origin <本地分支名>   // 将本地分支与远程同名分支相关联 // 简写方式：git push -u origin <本地分支名> 
       2.3.2 git push                                      //将本地当前分支 推送到 与本地当前分支同名的远程分支上
             或 
             git push origin <远程同名分支名>
    
   2.4  
       2.4.1 //need code review, and then merge; find using commit-id in web, and cherry pick it into master in order to do merge request.
             git push origin HEAD:refs/for/master               
       2.4.2
             git push origin HEAD:refs/heads/master     //needn't code review, and merge directly

   2.5 merge
       git push -o merge_request.create -o 
       merge_request.title="<title>"
       merge_request.description="xx"
       merge_request.target=my-target-branch
       merge_request.remove_source_branch
       merge_request.label="Label with spaces"

3. 查询记录 
    git diff --stat        #查看本地修改的文件
    git diff --cached      #look up content which has been added by "git add"
    git log --stat         #查看修改的文件
    git show "commit-id" --stat #查看修改的文件
    git log "commit-id" -p #查看修改的内容
    git log "commit-id" -p xx.cpp #查看指定文件的修改内容

4. 撤销 #回退代码到提交后xx,HEAD~xx
    git reset HEAD~1
    git checkout [file]            // 撤销工作区某个文件的更改
    git checkout .                 // 撤销工作区所有文件的更改
    git reset [file]               // 重置暂存区的指定文件，与上一次commit保持一致。但更改并没有消失，而是更改打回工作区 
    git reset --hard <当前分支名>  // 重置暂存区与工作区，与上一次commit保持一致。
    git reset [commit]             // 重置当前分支的指针为指定commit，同时重置暂存区。但更改并没有消失，而是更改打回工作区  
    git reset --hard [commit]      // 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致。
    git reset --keep [commit]      //重置当前HEAD为指定commit，但保持暂存区和工作区不变

    // 暂时将未提交的变化存入stash，稍后再弹出
    git stash
    git stash pop

5. 打tag
   git tag -a v1.0 -m "tag info"
   git tag -a v1.0 -m "tag info" commit-id   #为已经提交的commit打tag
   git tag                     #查询tag

############################################################################################
create a new repositorie named "i_project"  in web github

#
ssh-keygen -t rsa -C "12345678@qq.com"

#config
git config --global user.name "xxxx" 
git config --global user.email xxxxx@qq.com 
#create a new repository on the command line
echo "# i_project" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/twlklove/i_project.git
git push -u origin main

#use token
git remote set-url origin https://<your_token>@github.com/twlklove/i_project.git

#usage
#https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97
#
#
