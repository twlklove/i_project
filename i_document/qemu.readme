#https://www.qemu.org/

## 运行
#config_param= 
#qemu-system-aarch64 -M virt -cpu cortex-a57 -m 1G -nographic -kernel output/images/Image -hda output/images/rootfs.ext4 -append "root=/dev/vda"

#for embeded system, use initramfs; initramfs is included into Image;
#qemu-system-aarch64 -M virt -cpu cortex-a57 -m 1G -nographic -kernel output/images/Image  --append "rdinit=/linuxrc" -nographic
#
#qemu-system-aarch64 -M raspi3 -kernel xx.elf -serial null -serial stdio 

#for freertos
#cd FreeRTOS/FreeRTOS/Demo/CORTEX_M3_MPS2_QEMU_GCC
#change heap and stack size in scripts/mps2_m3.ld
#qemu-system-arm -M mps2-an385 -monitor null -semihosting --semihosting-config enable=on,target=native -serial stdio -nographic -kernel ./build/RTOSDemo.axf
#qemu-system-arm -M mps2-an385 -monitor null -semihosting --semihosting-config enable=on,target=native -serial stdio -nographic -kernel ./build/run.bin -cpu cortex-m3 -m 16M -smp 1 -net nic -net tap


### 调试
#-S 表示guest虚拟机一启动就会暂停
#-s 表示监听tcp:1234端口等待GDB的连接
qemu-system-aarch64 -M raspi3 -kernel rtthread.elf -s -S  -serial null [-serial stdio]
aarch64-elf-gdb
target remote localhost:1234连接
file raspberry-pi/src/rt-thread/bsp/raspi3-64/rtthread.elf   #打开调试文件
layout src  # 查看源码 
#start gdb 调试
# 
#debug for x86
#qemu-system-x86_64 -kernel arch/x86_64/boot/bzImage     # 指定编译好的内核
                    -hda rootfs.img         # 指定硬盘
                    -append "root=/dev/sda"      # 告诉内核硬盘上有根文件系统

#
#for uboot
#download and compile uboot
#qemu-system-aarch64 -machine virt -cpu cortex-a57 -bios output/images/u-boot.bin -nographic
#
#start from flash
#dd if=/dev/zero of=flash.bin bs=4096 count=16384
#dd if=output/images/u-boot.bin of=flash.bin conv=notrunc bs=4096
#qemu-system-aarch64 -machine virt -cpu cortex-a57 -m 1G -drive file=flash.bin,format=raw,if=pflash -nographic
#
#

