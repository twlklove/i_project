gcc 内联汇编
　　gcc 内联汇编的格式如下：

asm [volatile] ( 汇编语句   // or __asm__ [__volatile__]
    : 输出操作数		// 非必需
    : 输入操作数		// 非必需
    : 其他被污染的寄存器	// 非必需
    );

For example""
#include <stdio.h>
int main()
{
	int a=1, b=2, c=0;

	// 蛋疼的 add 操作
	asm(
		"addl %2, %0"		// 1
		: "=g"(c)			// 2 “=”是output operand字段特有的约束，表示该操作数是只写的（write-only)
		: "0"(a), "g"(b)	// 3
		: "memory");		// 4

	printf("现在c是:%d\n", c);
	return 0;
}
内联汇编中：
第1行是汇编语句，用双引号引起来， 多条语句用 ; 或者 \n\t 来分隔。
第2行是输出操作数，都是 "=?"(var) 的形式， var 可以是任意内存变量（输出结果会存到这个变量中）， ? 一般是下面这些标识符 （表示内联汇编中用什么来代理这个操作数）：
a,b,c,d,S,D 分别代表 eax,ebx,ecx,edx,esi,edi 寄存器
r 上面的寄存器的任意一个（谁闲着就用谁）
m 内存
i 立即数（常量，只用于输入操作数）
g 寄存器、内存、立即数 都行（gcc你看着办）
在汇编中用 %序号 来代表这些输入/输出操作数， 序号从 0 开始。为了与操作数区分开来， 寄存器用两个%引出，如：%%eax
第3行是输入操作数，都是 "?"(var) 的形式， ? 除了可以是上面的那些标识符，还可以是输出操作数的序号， 表示用 var 来初始化该输出操作数， 上面的程序中 %0 和 %1 就是一个东西，初始化为 1（a的值）。
第4行标出那些在汇编代码中修改了的、 又没有在输入/输出列表中列出的寄存器， 这样 gcc 就不会擅自使用这些"危险的"寄存器。 还可以用 "memory" 表示在内联汇编中修改了内存， 之前缓存在寄存器中的内存变量需要重新读取。

Note:
 : "=a" (out_var) "=a"指定output operand的应遵守的约束（constraint），out_var为存放指令结果的变量，通常是个C语言变量。本例中，“=”是output operand字段特有的约束，表示该操作数是只写的（write-only）；“a”表示先将命令执行结果输出至%eax，然后再由寄存器%eax更新位于内存中的out_var。
       需要明确的是，在指明input operands的情况下，即使指令不会产生output operands，其:也需要给出。例如asm ("sidt %0\n" : :"m"(loc));
常用的约束项。
       1）寄存器操作数约束（register operand constraint, r）
          asm ("movl %%eax, %0\n" : "=r"(out_val));
       该指令的作用是将%eax的值返回给%0所引用的C语言变量out_val，根据"=r"约束可知具体的操作流程为：先将%eax值复制给任一GPR，最终由该寄存器将值写入%0所代表的变量中。"r"约束指明gcc可以先将%eax值存入任一可用的寄存器，然后由该寄存器负责更新内存变量。
       2）内存操作数约束（Memory operand constraint, m）
       当我们不想通过寄存器中转，而是直接操作内存时，可以用"m"来约束。例如：
            asm volatile ( "lock; decl %0" : "=m" (counter) : "m" (counter));
       该指令实现原子减一操作，输入、输出操作数均直接来自内存（也正因如此，才能保证操作的原子性）。
       3）关联约束（matching constraint）
       如果命令的输入、输出均为同一个变量，此时，input operand和output operand共用同一个“中转”寄存器。例如：asm ("incl %0" :"=a"(var):"0"(var));该指令对变量var执行incl操作，由于输入、输出均为同一变量，因此可用"0"来指定都用%eax作为中转寄存器。注意"0"约束修饰的是input operands。
