[1] mutex
  常用头文件：
  #include <pthread.h>
  常用函数：
    // pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIER; //静态init 
　　int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *mutexattr);//互斥初始化
　　int pthread_mutex_destroy(pthread_mutex_t *mutex);//销毁互斥
　　int pthread_mutex_lock(pthread_mutex_t *mutex);//锁定互斥
　　int pthread_mutex_unlock(pthread_mutex_t *mutex);//解锁互斥
　　int pthread_mutex_trylock(pthread_mutex_t *mutex);//

　　eg.
    pthread_t mutex;
　　pthread_mutex_init(&mutex, NULL);
　　pthread_mutex_lock(&mutex);
　　...
　　pthread_mutex_unlock(&mutex);
　　pthread_mutex_detroy(&mutex);

    #include <cstdio>
    #include <cstdlib>
    #include <unistd.h>
    #include <pthread.h>
    #include "iostream"
    using namespace std;
    pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
    int tmp;
    
    void* thread(void *arg)
    {
        cout << "thread id is " << pthread_self() << endl;
        pthread_mutex_lock(&mutex);
        tmp = 12;
        pthread_mutex_unlock(&mutex);
    
        return NULL;
    }
    
    int main()
    {
        pthread_t id;
        cout << "main thread id is " << pthread_self() << endl;
        tmp = 3;

        if (!pthread_create(&id, NULL, thread, NULL))
        {
            cout << "Create thread success!" << endl;
        }
        else
        {
            cout << "Create thread failed!" << endl;
        }
    
        pthread_join(id, NULL);
        pthread_mutex_destroy(&mutex);
    
        return 0;
    }
    
    g++ -o thread testthread.cpp -lpthread
[2] rwlock
　　读写锁与互斥量类似，不过读写锁拥有更高的并行性。读写锁有3种状态：读模式下加锁状态，写模式下加锁状态，不加锁状态。一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁。

  常用头文件：
  #include <pthread.h>
  常用函数：
　　int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *rwlockattr);//初始化读写锁
　　int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);//销毁读写锁
　　int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);//读模式锁定读写锁
　　int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);//写模式锁定读写锁
　　int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);//解锁读写锁

　　eg.
    pthread_rwlock_t q_lock;
　　pthread_rwlock_init(&q_lock, NULL);
　　pthread_rwlock_rdlock(&q_lock);
　　...
　　pthread_rwlock_unlock(&q_lock);
　　pthread_rwlock_detroy(&q_lock);

[3] cond
　　条件变量是线程可用的另一种同步机制。互斥量用于上锁，条件变量则用于等待，并且条件变量总是需要与互斥量一起使用,条件变量本身是由互斥量保护的，线程在改变条件变量之前必须首先锁住互斥量。
  常用头文件：
    #include <pthread.h>
  常用函数：
    //静态初始化 pthread_cond_t cond=PTHREAD_COND_INITIALIER
　　int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);//初始化条件变量
　　int pthread_cond_destroy(pthread_cond_t *cond);//销毁条件变量
    int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);//无条件等待条件变量变为真
　　int pthread_cond_timewait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *tsptr);//在给定时间内，等待条件变量变为真
    
    int pthread_cond_signal(pthread_cond_t *cond);     //至少通知1个线程
　　int pthread_cond_broadcast(pthread_cond_t *cond);  //解除所有线程的阻塞

　　eg.
    pthread_mutex_t mutex;
　　pthread_cond_t cond;
    ...
　　pthread_mutex_lock(&mutex);
　　pthread_cond_wait(&cond, &mutex);
　　...
　　pthread_mutex_unlock(&mutex);
　　...

　　注意: 　　
　　1. pthread_cond_wait/pthread_cond_timedwait 一定要在mutex的锁定区域内使用, 
    2. 正确使用pthread_mutex_lock/pthread_mutex_unlock,参考pthread_cleanup_push和pthread_cleanup_pop宏，保证线程被cancel的时候正确的释放mutex！
    3. pthread_cond_wait执行的流程首先将这个mutex解锁, 然后等待条件变量被唤醒, 如果没有被唤醒, 该线程将一直休眠, 当被唤醒时, 将自动将这个mutex加锁，然后再进行条件变量判断(原因是多个线程情况下会出现“惊群效应”),故需要将其放在while循环中,如：while(0 == count) {pthread_cond_wait(&count_cond, &mutex);}
　　4. posix1标准说，pthread_cond_signal与pthread_cond_broadcast无需考虑调用线程是否是mutex的拥有者，也就是说，可以在lock与unlock以外的区域调用。如果我们对调用行为不关心，那么请在lock区域之外调用吧。
    5. 条件变量函数不是异步信号安全的，不应当在信号处理程序中进行调用pthread_cond_signal/pthread_cond_boardcast，可能导致调用线程死锁。

     #include <pthread.h>
     #include <unistd.h>
     #include "stdio.h"
     #include "stdlib.h"
     static pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;
     static pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
     
     struct node
     {
          int n_number;
          struct node *n_next;
     } *head = NULL;
     
     static void cleanup_handler(void *arg)
     
     {
          printf("Cleanup handler of second thread./n");
          free(arg);
          (void)pthread_mutex_unlock(&mtx);
     }
     
     static void *thread_func(void *arg)
     {
          struct node *p = NULL;
          pthread_cleanup_push(cleanup_handler, p);
     
          while (1)
          {
             pthread_mutex_lock(&mtx);
     
            while (head == NULL)
            {
              pthread_cond_wait(&cond, &mtx);
            }
     
            p = head;
            head = head->n_next;
            printf("Got %d from front of queue/n", p->n_number);
            free(p);
     
            pthread_mutex_unlock(&mtx); 
          }
     
          pthread_cleanup_pop(0);
          return 0;
     }
     
     int main(void)
     {
          pthread_t tid;
          int i;
          struct node *p;
     
          pthread_create(&tid, NULL, thread_func, NULL);
          sleep(1);
          for (i = 0; i < 10; i++)
          {
              p = (struct node*)malloc(sizeof(struct node));
              p->n_number = i;
              pthread_mutex_lock(&mtx); //需要操作head这个临界资源，先加锁，
              p->n_next = head;
              head = p;
              pthread_cond_signal(&cond);
              pthread_mutex_unlock(&mtx); //解锁
              sleep(1);
          }
     
          pthread_cancel(tid); //终止子线程，子线程会在最近的取消点退出线程
          pthread_join(tid, NULL);
     
          return 0;
     }
     
[4] semaphore
　　线程的信号和进程的信号量类似，使用线程的信号量可以高效地完成基于线程的资源计数。信号量实际上是一个非负的整数计数器，用来实现对公共资源的控制。在公共资源增加的时候，信号量就增加；公共资源减少的时候，信号量就减少；只有当信号量的值大于0的时候，才能访问信号量所代表的公共资源。

  常用头文件：
   #include <semaphore.h>
  常用函数：
   　　sem_t sem_event;
   　　int sem_init(sem_t *sem, int pshared, unsigned int value);//pshared is 0 for threads in same process，not 0 is for processes
   　　int sem_post(sem_t * sem);//+1
   　　int sem_wait(sem_t * sem);//-1, 对一个值为0的信号量调用sem_wait,这个函数将会等待直到有其它线程使它不再是0为止。
   　　int sem_getvalue(sem_t * sem, int * sval);//获取当前信号量的值 
       int sem_destroy(sem_t * sem);//销毁信号量

[5] spin_lock
　　自旋锁与互斥量类似，但它不是通过休眠使进程阻塞，而是在获取锁之前一直处于忙等（自旋）阻塞状态。
    #include <pthread.h>
    int pthread_spin_init (pthread_spinlock_t *__lock,int __pshared);
    int pthread_spin_destroy (pthread_spinlock_t *__lock);
    int pthread_spin_lock (pthread_spinlock_t *__lock);
    int pthread_spin_trylock (pthread_spinlock_t *__lock);
    int pthread_spin_unlock (pthread_spinlock_t *__lock);

[6] barrier
　　屏障是指用户可以协调多个线程并行工作的同步机制。屏障允许每个线程等待，直到所有的合作线程都到达某一点，然后从改点继续执行。
    pthread_join函数就是一种屏障，它允许一个线程等待，直到另一个线程退出。屏障允许任意数量的线程等待，直到所有的线程完成处理工作，而线程不需要退出。所有线程达到屏障后可以接着工作。
    #include <pthread.h>
    int pthread_barrier_init (pthread_barrier_t *__restrict __barrier, const pthread_barrierattr_t *__restrict __attr, unsigned int __count);
    int pthread_barrier_destroy (pthread_barrier_t *__barrier);
    int pthread_barrier_wait (pthread_barrier_t *__barrier);

////////////////////////////////////////////////
linux下进程间通信的几种主要手段简介：
   1. 管道（Pipe）及有名管道（named pipe）：管道可用于具有亲缘关系进程间的通信，有名管道还允许无亲缘关系进程间的通信
      pipe(),popen() / mkfifo(),mknod()
   2. 信号（Signal）：用于通知接受进程有某种事件发生，用于进程间通信,linux sigaction函数重新实现了signal 函数；
      kill(),raise(),pause(),signal(),sigaction()
   3. 消息（Message）队列：消息队列是消息的链接表，消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。 
      ftok(),msgget(),msgsnd(),msgrcv(),msgctl()
   4. 共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。
      mmap(),munmap() / ftok(),shmget(),shmat(),shmdt()
   5. 信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。
      sem_init()
   6. 套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。
      socket()
