当下比较流行的序列化协议，包括XML、JSON、Protobuf、Thrift
1. Thrift是Facebook开源提供的一个高性能，轻量级RPC服务框架，其产生正是为了满足当前大数据量、分布式、跨语言、跨平台数据通讯的需求。 
    Thrift并不仅仅是序列化协议，而是一个RPC框架。Thrift = protoc + protobuffer + grpc
    Thrift的序列化和框架紧耦合，无法支持向持久层直接读写数据，所以不适合做数据持久化序列化协议。

2. Protobuf: 只是简单的序列化与反序列化，需要结合gRPC才能实现RPC调用
    Protobuf具备了优秀的序列化协议的所需的众多典型特征：
    1. 序列化数据非常简洁，紧凑，与XML相比，其序列化之后的数据量约为1/3到1/10。
    2. 解析速度非常快，比对应的XML快约20-100倍。
    3. 提供了非常友好的动态库，使用非常简介，反序列化只需要一行代码。
    空间开销小以及高解析性能是其亮点，非常适合于对性能要求高的RPC调用.

    protobuf不支持二维数组（指针），不支持STL容器序列化

RPC调用：
三步骤：
1. Call ID映射
2. 序列化和反序列化
3. 网络传输：远程调用往往用在网络上，客户端和服务端是通过网络连接的，故需要有一个网络传输层。
                     网络传输层需要把Call ID和序列化后的参数字节流传给服务端，然后再把序列化后的调用结果传回客户端。
                     大部分RPC框架都使用TCP协议，gRPC使用HTTP2，UDP也可以，

grpc:
local install :
    export MY_INSTALL_DIR=$HOME/.local
    mkdir -p $MY_INSTALL_DIR
    export PATH="$MY_INSTALL_DIR/bin:$PATH"
    sudo apt install -y cmake
    mkdir -p cmake/build
    pushd cmake/build
    cmake -DgRPC_INSTALL=ON       -DgRPC_BUILD_TESTS=OFF       -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR       ../..
    make -j
    make install
    popd

for example :
    cd examples/cpp/helloworld/
    ls
    mkdir -p cmake/build
    pushd cmake/build
    cmake -DCMAKE_PREFIX_PATH=$MY_INSTALL_DIR ../..
    make -j

